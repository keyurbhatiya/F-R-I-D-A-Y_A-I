# pip install -U g4fimport g4ffrom time import time as timport pyttsx3import speech_recognitionimport randomengine = pyttsx3.init("sapi5")voices = engine.getProperty("voices")engine.setProperty("voice", voices[2].id)rate = engine.setProperty("rate", 170)def speak(audio):    engine.say(audio)    engine.runAndWait()def takeCommand():    r = speech_recognition.Recognizer()    with speech_recognition.Microphone() as source:        print("Listening.....")        r.pause_threshold = 1        r.energy_threshold = 300        audio = r.listen(source, 0, 4)    try:        print("Understanding..")        query = r.recognize_google(audio, language='en-in')        print(f"You Said: {query}\n")        return query.lower()  # Convert the query to lowercase for case-insensitive comparison    except Exception as e:        print("Say that again")        return "None"# Global variable to store chat messagesdef chat_gpt(*args, **kwargs):    global messages    assert args != ()    # Combine all arguments into a single message    message = ''.join(args)    # Call GPT for chat completion    response = g4f.ChatCompletion.create(        model="gpt-4-32k-0613",        provider=g4f.Provider.GPTalk,        messages=messages,        stream=True,    )    assistant_response = ''    for message in response:        assistant_response += str(message)        print(message, end="", flush=True)intents = [    {        "tag": "A0",        "patterns": ["hi friday"],        "responses": ["Hi", "Hello"]    },    {        "tag": "A1",        "patterns": ["hello friday"],        "responses": ["Hi", "Hello"]    },    {        "tag": "A2",        "patterns": ["bye friday"],        "responses": ["Bye", "Bye bye"]    },    {        "tag": "A3",        "patterns": ["i am back"],        "responses": ["Welcome back"]    }]def handle_user_input(user_input):    for intent in intents:        if user_input.lower() in intent['patterns']:            return random.choice(intent['responses'])    return "I'm sorry, I didn't understand that."def main():    """    :rtype: object    """    print(">>> ")    speak("say that again Boss")    try:        user_input = takeCommand()        speak("Sure! Boss")        start_time = t()        response = handle_user_input(user_input)        if response == "I'm sorry, I didn't understand that.":            # Call GPT for chat completion if user input is not recognized            response = chat_gpt(user_input)        print("Jarvis:", response)        speak(response)        print(f"Time taken: {t() - start_time:.2f} seconds")        speak("Done, Boss")    except Exception as e:        print(f"Error: {e}")if __name__ == "__main__":    main()    breakpoint()