# pip install bardapifrom bardapi import BardCookiesimport datetimeimport pyttsx3import speech_recognitionimport pyperclipimport pyautoguiimport webbrowserfrom time import sleepimport jsonimport keyboardengine = pyttsx3.init("sapi5")  # Initialize the text-to-speech engine with sapi5voices = engine.getProperty("voices")engine.setProperty("voice", voices[2].id)rate = engine.setProperty("rate", 170)def speak(audio):    engine.say(audio)    engine.runAndWait()def takeCommand():    r = speech_recognition.Recognizer()    with speech_recognition.Microphone() as source:        print("Listening.....")        r.pause_threshold = 1        r.energy_threshold = 300        # Continuous listening until a pause is detected        audio = r.listen(source, timeout=None)    try:        print("Understanding..")        query = r.recognize_google(audio, language='en-in')        print(f"You Said: {query}\n")    except speech_recognition.WaitTimeoutError:        # Raised if no speech is detected for a certain duration        print("You stopped speaking. Listening stopped.")        return "None"    except Exception as e:        print("Say that again")        return "None"    return querydef CookieScrapper():    webbrowser.open("https://bard.google.com")    sleep(2)    pyautogui.click(x=1742, y=79)    sleep(1)    pyautogui.click(x=1542, y=320)    sleep(1)    pyautogui.click(x=1462, y=120)    sleep(1)    #keyboard.press_and_release ('ctrl' , 'w')    pyautogui.hotkey('ctrl', 'w')    #pyautogui.hotkey('f5')    data = pyperclip.paste()    try:        json_data = json.loads(data)        pass    except json.JSONDecodeError as e:        print(f"Error parsing JSON data: {e}")    SID = "__Secure-1PSID"    TS = "__Secure-1PSIDTS"    CC = "__Secure-1PSIDCC"    SIDValue = next((item for item in json_data if item["name"] == SID), None)    TSValue = next((item for item in json_data if item["name"] == TS), None)    CCValue = next((item for item in json_data if item["name"] == CC), None)    if SIDValue is not None:        SIDValue = SIDValue["value"]    else:        print(f"{SIDValue} not found in the JSON data.")    if TSValue is not None:        TSValue = TSValue["value"]    else:        print(f"{TSValue} not found in the JSON data.")    if CCValue is not None:        CCValue = CCValue["value"]    else:        print(f"{CCValue} not found in the JSON data.")    cookie_dict = {        "__Secure-1PSID": SIDValue ,        "__Secure-1PSIDTS": TSValue,        "__Secure-1PSIDCC": CCValue,    }    return cookie_dictcookie_dict = CookieScrapper()bard = BardCookies(cookie_dict = cookie_dict)def split_and_save_paragraphs(data, filename):    paragraphs = data.split('\n\n')    with open(filename, 'w') as file:        file.write(data)    data = paragraphs[:2]    separator = ', '    joined_string = separator.join(data)    return joined_string# Main Executionwhile True:    Question = takeCommand()    RealQuestion = str(Question)    speak("wait for a few minutes Boss")    results = bard.get_answer(RealQuestion)['content']    current_datetime = datetime.datetime.now()    formatted_time = current_datetime.strftime("%H%M%S")    filenamedate = str(formatted_time) + str(".txt")    filenamedate = 'DataBase'.format (filenamedate)    print(split_and_save_paragraphs(results, filename=filenamedate))    speak(split_and_save_paragraphs(results, filename=filenamedate))